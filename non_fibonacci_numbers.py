# -*- coding: utf-8 -*-
"""non_fibonacci_numbers.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14AqzfLb81FBxZtMcwn2nNxVNbDgQK2_u
"""

def in_fibonacci(value):
  prev = 0 
  next = 1
  if(value == prev or value == next):
    return 1
  while( next <= value):
    temp = next
    next = prev + next  
    prev = temp  
    if(next == value):
      return 1
  return 0
# Сложность выполнения здесь экспоненциальна, O (2 ^ n)
# Сложность памяти решения составляет O (n), 
# поскольку каждый вызов in_fobinacci() потребляет память в стеке.
def print_non_fibonacci(N):
  for i in range(N):
    if(not in_fibonacci(i)):
      print(i)

N = int(input('Введите N: '))

#print_non_fibonacci(N)



# оптимальное по памяти и времени решение
# Сложность выполнения решения линейна, O (n)
# Сложность памяти решения постоянна O (1)
def non_fibonacci_nums(value):
  prev = 0 
  next = 1
  if(value == prev or value == next):
    return 
  while( next <= value):
    prev, next = next, prev + next    
    for i in range(prev+1, next):
      if i <= value:
        print(i)
      
  return 

non_fibonacci_nums(N)